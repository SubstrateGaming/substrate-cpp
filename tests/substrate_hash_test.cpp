#include <gtest/gtest.h>

#include <substrate/hash.h>
#include <substrate/hex.h>

struct HashTestBlake2Params
{
   std::string Expected;
   std::vector<uint8_t> Bytes;
};

class HashTestBlake2 : public testing::TestWithParam<HashTestBlake2Params>
{
};

TEST_P(HashTestBlake2, Hash)
{
   auto params = GetParam();
   EXPECT_EQ(substrate::hash::blake2(params.Bytes), substrate::hex_decode(params.Expected));
}

INSTANTIATE_TEST_SUITE_P(libSubstrate_tests, HashTestBlake2, testing::Values(
   HashTestBlake2Params{"0xd6bfa4fbbbb302d0f4e13a8904673181", std::vector<uint8_t>{0x00, 0x00, 0x00, 0x01}},
   HashTestBlake2Params{"0x27c35e6e9373877f29e562464e46497e", std::vector<uint8_t>{0x61}},
   HashTestBlake2Params{"0xbd21ffc6c919770b9b19389c3deb819e", std::vector<uint8_t>{0x62, 0x62, 0x62}},
   HashTestBlake2Params{"0x815f32ac698e44efe27b338a1f16ddb1", std::vector<uint8_t>{0x63, 0x63, 0x63}},
   HashTestBlake2Params{"0x834061332e32438e7525a4a594949a5c", std::vector<uint8_t>{0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67}},
   HashTestBlake2Params{"0x5e7205b7d130f2260d0de6af473fa77f", std::vector<uint8_t>{0x00, 0xeb, 0x15, 0x23, 0x1d, 0xfc, 0xeb, 0x60, 0x92, 0x58, 0x86, 0xb6, 0x7d, 0x06, 0x52, 0x99, 0x92, 0x59, 0x15, 0xae, 0xb1, 0x72, 0xc0, 0x66, 0x47}},
   HashTestBlake2Params{"0xa467d541bcfc655a8bf9f2cb53968d36", std::vector<uint8_t>{0x51, 0x6b, 0x6f, 0xcd, 0x0f}},
   HashTestBlake2Params{"0x798bb8687e807ffe86f76f364f479bf5", std::vector<uint8_t>{0xbf, 0x4f, 0x89, 0x00, 0x1e, 0x67, 0x02, 0x74, 0xdd}},
   HashTestBlake2Params{"0xb64eee199750cacebf324edd4553ce15", std::vector<uint8_t>{0x57, 0x2e, 0x47, 0x94}},
   HashTestBlake2Params{"0x68826c52f3a59365d0f6fda7b5bd8123", std::vector<uint8_t>{0xec, 0xac, 0x89, 0xca, 0xd9, 0x39, 0x23, 0xc0, 0x23, 0x21}},
   HashTestBlake2Params{"0x2eac74f5e4f1e16b7f4514c962200336", std::vector<uint8_t>{0x10, 0xc8, 0x51, 0x1e}},
   HashTestBlake2Params{"0xd8137e27c3ff130fd78d6c2e29a9fa1b", std::vector<uint8_t>{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
));
